{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Output, EventEmitter } from '@angular/core';\nexport let LoginComponent = class LoginComponent {\n  constructor(loginService, loginFormVisibilityService) {\n    this.loginService = loginService;\n    this.loginFormVisibilityService = loginFormVisibilityService;\n    this.email = '';\n    this.password = '';\n    this.submitted = new EventEmitter();\n    this.loginFormOpened = new EventEmitter();\n  }\n  toggleLoginForm() {\n    // Get the current visibility of the login form from the service\n    const currentVisibility = this.loginFormVisibilityService.showLoginForm$.getValue();\n    // Toggle the visibility\n    this.loginFormVisibilityService.setShowLoginFormVisibility(!currentVisibility);\n    // Emit the event to update the visibility in the parent component (NavbarComponent)\n    this.loginFormOpened.emit(!currentVisibility);\n  }\n  onSubmit() {\n    // Implement your login logic here\n    // For simplicity, we will just consider a successful login\n    // You can add proper validation and authentication logic here\n    // Emit the 'submitted' event when the form is submitted\n    this.submitted.emit();\n    // Call the login service to perform the API call to your backend server\n    this.loginService.login(this.email, this.password).subscribe(response => {\n      // Login successful\n      alert('Login successful');\n      // You can perform further actions here, such as redirecting the user to a dashboard page.\n    }, error => {\n      // Login failed\n      alert('Invalid credentials');\n    });\n    // Hide the login form after successful login\n    this.loginFormVisibilityService.setShowLoginFormVisibility(false);\n  }\n};\n__decorate([Output()], LoginComponent.prototype, \"submitted\", void 0);\n__decorate([Output()], LoginComponent.prototype, \"loginFormOpened\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Output","EventEmitter","LoginComponent","constructor","loginService","loginFormVisibilityService","email","password","submitted","loginFormOpened","toggleLoginForm","currentVisibility","showLoginForm$","getValue","setShowLoginFormVisibility","emit","onSubmit","login","subscribe","response","alert","error","__decorate","selector","templateUrl","styleUrls"],"sources":["E:\\Main_project\\Frontend\\src\\app\\pages\\login\\login.component.ts"],"sourcesContent":["import { Component, Output, EventEmitter } from '@angular/core';\r\nimport { LoginService } from 'src/app/';\r\nimport { LoginFormVisibilityService } from '../services/login-form-visibility.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent {\r\n  email: string = '';\r\n  password: string = '';\r\n\r\n  constructor(\r\n    private loginService: LoginService,\r\n    private loginFormVisibilityService: LoginFormVisibilityService\r\n  ) {}\r\n\r\n  @Output() submitted = new EventEmitter<void>();\r\n  @Output() loginFormOpened = new EventEmitter<boolean>();\r\n\r\n  toggleLoginForm() {\r\n    // Get the current visibility of the login form from the service\r\n    const currentVisibility = this.loginFormVisibilityService.showLoginForm$.getValue();\r\n    // Toggle the visibility\r\n    this.loginFormVisibilityService.setShowLoginFormVisibility(!currentVisibility);\r\n    // Emit the event to update the visibility in the parent component (NavbarComponent)\r\n    this.loginFormOpened.emit(!currentVisibility);\r\n  }\r\n\r\n  onSubmit() {\r\n    // Implement your login logic here\r\n    // For simplicity, we will just consider a successful login\r\n    // You can add proper validation and authentication logic here\r\n\r\n    // Emit the 'submitted' event when the form is submitted\r\n    this.submitted.emit();\r\n\r\n    // Call the login service to perform the API call to your backend server\r\n    this.loginService.login(this.email, this.password).subscribe(\r\n      (response) => {\r\n        // Login successful\r\n        alert('Login successful');\r\n        // You can perform further actions here, such as redirecting the user to a dashboard page.\r\n      },\r\n      (error) => {\r\n        // Login failed\r\n        alert('Invalid credentials');\r\n      }\r\n    );\r\n\r\n    // Hide the login form after successful login\r\n    this.loginFormVisibilityService.setShowLoginFormVisibility(false);\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,YAAY,QAAQ,eAAe;AASxD,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YACUC,YAA0B,EAC1BC,0BAAsD;IADtD,KAAAD,YAAY,GAAZA,YAAY;IACZ,KAAAC,0BAA0B,GAA1BA,0BAA0B;IALpC,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IAOX,KAAAC,SAAS,GAAG,IAAIP,YAAY,EAAQ;IACpC,KAAAQ,eAAe,GAAG,IAAIR,YAAY,EAAW;EAHpD;EAKHS,eAAeA,CAAA;IACb;IACA,MAAMC,iBAAiB,GAAG,IAAI,CAACN,0BAA0B,CAACO,cAAc,CAACC,QAAQ,EAAE;IACnF;IACA,IAAI,CAACR,0BAA0B,CAACS,0BAA0B,CAAC,CAACH,iBAAiB,CAAC;IAC9E;IACA,IAAI,CAACF,eAAe,CAACM,IAAI,CAAC,CAACJ,iBAAiB,CAAC;EAC/C;EAEAK,QAAQA,CAAA;IACN;IACA;IACA;IAEA;IACA,IAAI,CAACR,SAAS,CAACO,IAAI,EAAE;IAErB;IACA,IAAI,CAACX,YAAY,CAACa,KAAK,CAAC,IAAI,CAACX,KAAK,EAAE,IAAI,CAACC,QAAQ,CAAC,CAACW,SAAS,CACzDC,QAAQ,IAAI;MACX;MACAC,KAAK,CAAC,kBAAkB,CAAC;MACzB;IACF,CAAC,EACAC,KAAK,IAAI;MACR;MACAD,KAAK,CAAC,qBAAqB,CAAC;IAC9B,CAAC,CACF;IAED;IACA,IAAI,CAACf,0BAA0B,CAACS,0BAA0B,CAAC,KAAK,CAAC;EACnE;CACD;AApCWQ,UAAA,EAATtB,MAAM,EAAE,C,gDAAsC;AACrCsB,UAAA,EAATtB,MAAM,EAAE,C,sDAA+C;AAV7CE,cAAc,GAAAoB,UAAA,EAL1BvB,SAAS,CAAC;EACTwB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWvB,cAAc,CA6C1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}