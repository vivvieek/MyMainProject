{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class RoleGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const userRole = route.data['roles'];\n    const userData = route.data['userData']; // Use the resolved user data here\n    if (userData && userRole.includes(userData.role)) {\n      return true; // User has the required role, allow access\n    } else {\n      alert('Access Denied');\n      this.router.navigate(['/error']); // Redirect to an error page or another route\n      return false;\n    }\n  }\n}\nRoleGuard.ɵfac = function RoleGuard_Factory(t) {\n  return new (t || RoleGuard)(i0.ɵɵinject(i1.Router));\n};\nRoleGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RoleGuard,\n  factory: RoleGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["RoleGuard","constructor","router","canActivate","route","state","userRole","data","userData","includes","role","alert","navigate","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["E:\\Main_project\\Frontend\\src\\app\\my-auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { LoginService } from './shared/link.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RoleGuard implements CanActivate {\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    const userRole = route.data['roles'];\r\n    const userData = route.data['userData']; // Use the resolved user data here\r\n\r\n    if (userData && userRole.includes(userData.role)) {\r\n      return true; // User has the required role, allow access\r\n    } else {\r\n      alert('Access Denied');\r\n      this.router.navigate(['/error']); // Redirect to an error page or another route\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n"],"mappings":";;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,QAAQ,GAAGF,KAAK,CAACG,IAAI,CAAC,OAAO,CAAC;IACpC,MAAMC,QAAQ,GAAGJ,KAAK,CAACG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;IAEzC,IAAIC,QAAQ,IAAIF,QAAQ,CAACG,QAAQ,CAACD,QAAQ,CAACE,IAAI,CAAC,EAAE;MAChD,OAAO,IAAI,CAAC,CAAC;KACd,MAAM;MACLC,KAAK,CAAC,eAAe,CAAC;MACtB,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAClC,OAAO,KAAK;;EAEhB;;AAfWZ,SAAS,C;mBAATA,SAAS,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;AAAA;AAAThB,SAAS,C;SAATA,SAAS;EAAAiB,OAAA,EAATjB,SAAS,CAAAkB,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}