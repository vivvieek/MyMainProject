{"ast":null,"code":"var LoginComponent_1;\nimport { __decorate } from \"tslib\";\nimport { Component, Output, EventEmitter } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nexport let LoginComponent = LoginComponent_1 = class LoginComponent {\n  constructor(loginFormVisibilityService) {\n    this.loginFormVisibilityService = loginFormVisibilityService;\n    this.email = '';\n    this.password = '';\n    this.showLoginForm = false;\n    this.submitted = new EventEmitter();\n    this.loginFormOpened = new EventEmitter();\n  }\n  toggleLoginForm() {\n    this.showLoginForm = !this.showLoginForm;\n    this.loginFormVisibilityService.setShowLoginFormVisibility(this.showLoginForm);\n  }\n  onSubmit() {\n    // Implement your login logic here\n    // For simplicity, we will just consider a successful login\n    // You can add proper validation and authentication logic here\n    // Emit the 'submitted' event when the form is submitted\n    this.submitted.emit();\n  }\n  showLogoutButton() {\n    // Show the logout button in the navbar\n    const navbarComponent = document.querySelector('app-navbar');\n    if (navbarComponent) {\n      navbarComponent.loggedIn = true;\n    }\n  }\n};\n__decorate([Output()], LoginComponent.prototype, \"submitted\", void 0);\n__decorate([Output()], LoginComponent.prototype, \"loginFormOpened\", void 0);\nLoginComponent = LoginComponent_1 = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n  declarations: [LoginComponent_1],\n  imports: [FormsModule]\n})], LoginComponent);","map":{"version":3,"names":["Component","Output","EventEmitter","FormsModule","LoginComponent","LoginComponent_1","constructor","loginFormVisibilityService","email","password","showLoginForm","submitted","loginFormOpened","toggleLoginForm","setShowLoginFormVisibility","onSubmit","emit","showLogoutButton","navbarComponent","document","querySelector","loggedIn","__decorate","selector","templateUrl","styleUrls","declarations","imports"],"sources":["E:\\Main_project\\Frontend\\src\\app\\pages\\login\\login.component.ts"],"sourcesContent":["import { Component, Output ,EventEmitter } from '@angular/core';\r\nimport { LoginFormVisibilityService } from 'src/app/shared/login-form-visiblity.service';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n  declarations: [LoginComponent],\r\n  imports: [FormsModule],\r\n})\r\nexport class LoginComponent {\r\n  email: string ='';\r\n  password: string = '';\r\n  showLoginForm: boolean = false;\r\n\r\n\r\n  constructor(private loginFormVisibilityService: LoginFormVisibilityService) {}\r\n  \r\n  @Output() submitted = new EventEmitter<void>();\r\n  @Output() loginFormOpened = new EventEmitter<boolean>();\r\n\r\n  toggleLoginForm() {\r\n    this.showLoginForm = !this.showLoginForm;\r\n    this.loginFormVisibilityService.setShowLoginFormVisibility(this.showLoginForm);\r\n  }\r\n\r\n   onSubmit() {\r\n    // Implement your login logic here\r\n    // For simplicity, we will just consider a successful login\r\n    // You can add proper validation and authentication logic here\r\n\r\n    // Emit the 'submitted' event when the form is submitted\r\n    this.submitted.emit();\r\n  }\r\n\r\n  private showLogoutButton() {\r\n    // Show the logout button in the navbar\r\n    const navbarComponent: any = document.querySelector('app-navbar');\r\n    if (navbarComponent) {\r\n      navbarComponent.loggedIn = true;\r\n    }\r\n  }\r\n}\r\n\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,YAAY,QAAQ,eAAe;AAE/D,SAASC,WAAW,QAAQ,gBAAgB;AASrC,WAAMC,cAAc,GAAAC,gBAAA,GAApB,MAAMD,cAAc;EAMzBE,YAAoBC,0BAAsD;IAAtD,KAAAA,0BAA0B,GAA1BA,0BAA0B;IAL9C,KAAAC,KAAK,GAAU,EAAE;IACjB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,aAAa,GAAY,KAAK;IAKpB,KAAAC,SAAS,GAAG,IAAIT,YAAY,EAAQ;IACpC,KAAAU,eAAe,GAAG,IAAIV,YAAY,EAAW;EAHsB;EAK7EW,eAAeA,CAAA;IACb,IAAI,CAACH,aAAa,GAAG,CAAC,IAAI,CAACA,aAAa;IACxC,IAAI,CAACH,0BAA0B,CAACO,0BAA0B,CAAC,IAAI,CAACJ,aAAa,CAAC;EAChF;EAECK,QAAQA,CAAA;IACP;IACA;IACA;IAEA;IACA,IAAI,CAACJ,SAAS,CAACK,IAAI,EAAE;EACvB;EAEQC,gBAAgBA,CAAA;IACtB;IACA,MAAMC,eAAe,GAAQC,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAC;IACjE,IAAIF,eAAe,EAAE;MACnBA,eAAe,CAACG,QAAQ,GAAG,IAAI;;EAEnC;CACD;AAxBWC,UAAA,EAATrB,MAAM,EAAE,C,gDAAsC;AACrCqB,UAAA,EAATrB,MAAM,EAAE,C,sDAA+C;AAT7CG,cAAc,GAAAC,gBAAA,GAAAiB,UAAA,EAP1BtB,SAAS,CAAC;EACTuB,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB,CAAC;EACpCC,YAAY,EAAE,CAACrB,gBAAc,CAAC;EAC9BsB,OAAO,EAAE,CAACxB,WAAW;CACtB,CAAC,C,EACWC,cAAc,CAgC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}