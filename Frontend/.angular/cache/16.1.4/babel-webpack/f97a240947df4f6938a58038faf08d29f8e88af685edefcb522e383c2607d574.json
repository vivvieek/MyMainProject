{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoginService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/login';\n  }\n  login(email, password) {\n    const loginData = {\n      email,\n      password\n    };\n    return this.http.post(this.apiUrl, loginData).pipe(tap(response => {\n      if (response.token) {\n        // Store the token securely (e.g., in an HTTP-only cookie or local storage)\n        localStorage.setItem('token', response.token);\n        // Log the token to the console (for demonstration purposes only)\n        console.log('Token:', response.token);\n      }\n    }));\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["tap","LoginService","constructor","http","apiUrl","login","email","password","loginData","post","pipe","response","token","localStorage","setItem","console","log","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\Main_project\\Frontend\\src\\app\\shared\\link.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoginService {\r\n  private apiUrl = 'http://localhost:3000/login';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    const loginData = { email, password };\r\n    return this.http.post<any>(this.apiUrl, loginData).pipe(\r\n      tap((response) => {\r\n        if (response.token) {\r\n          // Store the token securely (e.g., in an HTTP-only cookie or local storage)\r\n          localStorage.setItem('token', response.token);\r\n\r\n          // Log the token to the console (for demonstration purposes only)\r\n          console.log('Token:', response.token);\r\n        }\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,6BAA6B;EAEP;EAEvCC,KAAKA,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAMC,SAAS,GAAG;MAAEF,KAAK;MAAEC;IAAQ,CAAE;IACrC,OAAO,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAM,IAAI,CAACL,MAAM,EAAEI,SAAS,CAAC,CAACE,IAAI,CACrDV,GAAG,CAAEW,QAAQ,IAAI;MACf,IAAIA,QAAQ,CAACC,KAAK,EAAE;QAClB;QACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,QAAQ,CAACC,KAAK,CAAC;QAE7C;QACAG,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,QAAQ,CAACC,KAAK,CAAC;;IAEzC,CAAC,CAAC,CACH;EACH;;AAlBWX,YAAY,C;mBAAZA,YAAY,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZnB,YAAY,C;SAAZA,YAAY;EAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}