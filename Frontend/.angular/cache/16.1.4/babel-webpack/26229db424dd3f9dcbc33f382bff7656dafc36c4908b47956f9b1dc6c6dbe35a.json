{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserdataService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000'; // Replace with your backend API URL\n  }\n  // Method to handle the GET request to fetch all users\n  getAllUsers() {\n    return this.http.get(`${this.apiUrl}/users`);\n  }\n  // Method to handle the GET request to fetch a single user by ID\n  getUserById(userId) {\n    return this.http.get(`${this.apiUrl}/users/${userId}`);\n  }\n  // Method to handle the POST request to add a new user\n  addUser(user) {\n    return this.http.post(`${this.apiUrl}/users`, user);\n  }\n  // Method to handle the PUT request to update an existing user\n  updateUser(userId, user) {\n    return this.http.put(`${this.apiUrl}/users/${userId}`, user);\n  }\n  // Method to handle the DELETE request to delete a user by ID\n  deleteUser(userId) {\n    return this.http.delete(`${this.apiUrl}/users/${userId}`);\n  }\n}\nUserdataService.ɵfac = function UserdataService_Factory(t) {\n  return new (t || UserdataService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserdataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserdataService,\n  factory: UserdataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserdataService","constructor","http","apiUrl","getAllUsers","get","getUserById","userId","addUser","user","post","updateUser","put","deleteUser","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["E:\\Main_project\\Frontend\\src\\app\\userdata.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserdataService {\r\n  private apiUrl = 'http://localhost:3000'; // Replace with your backend API URL\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Method to handle the GET request to fetch all users\r\n  getAllUsers(): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/users`);\r\n  }\r\n\r\n  // Method to handle the GET request to fetch a single user by ID\r\n  getUserById(userId: number): Observable<any> {\r\n    return this.http.get<any>(`${this.apiUrl}/users/${userId}`);\r\n  }\r\n\r\n  // Method to handle the POST request to add a new user\r\n  addUser(user: any): Observable<any> {\r\n    return this.http.post<any>(`${this.apiUrl}/users`, user);\r\n  }\r\n\r\n  // Method to handle the PUT request to update an existing user\r\n  updateUser(userId: number, user: any): Observable<any> {\r\n    return this.http.put<any>(`${this.apiUrl}/users/${userId}`, user);\r\n  }\r\n\r\n  // Method to handle the DELETE request to delete a user by ID\r\n  deleteUser(userId: number): Observable<any> {\r\n    return this.http.delete<any>(`${this.apiUrl}/users/${userId}`);\r\n  }\r\n}\r\n"],"mappings":";;AAOA,OAAM,MAAOA,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,uBAAuB,CAAC,CAAC;EAEH;EAEvC;EACAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,QAAQ,CAAC;EACnD;EAEA;EACAG,WAAWA,CAACC,MAAc;IACxB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAM,GAAG,IAAI,CAACF,MAAM,UAAUI,MAAM,EAAE,CAAC;EAC7D;EAEA;EACAC,OAAOA,CAACC,IAAS;IACf,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAM,GAAG,IAAI,CAACP,MAAM,QAAQ,EAAEM,IAAI,CAAC;EAC1D;EAEA;EACAE,UAAUA,CAACJ,MAAc,EAAEE,IAAS;IAClC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAM,GAAG,IAAI,CAACT,MAAM,UAAUI,MAAM,EAAE,EAAEE,IAAI,CAAC;EACnE;EAEA;EACAI,UAAUA,CAACN,MAAc;IACvB,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAM,GAAG,IAAI,CAACX,MAAM,UAAUI,MAAM,EAAE,CAAC;EAChE;;AA5BWP,eAAe,C;mBAAfA,eAAe,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAflB,eAAe,C;SAAfA,eAAe;EAAAmB,OAAA,EAAfnB,eAAe,CAAAoB,IAAA;EAAAC,UAAA,EAFd;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}