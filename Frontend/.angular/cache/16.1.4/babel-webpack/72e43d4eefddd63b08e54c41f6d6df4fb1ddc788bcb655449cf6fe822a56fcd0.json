{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Output, EventEmitter } from '@angular/core';\nexport let LoginComponent = class LoginComponent {\n  constructor(loginService, loginFormVisibilityService, router) {\n    this.loginService = loginService;\n    this.loginFormVisibilityService = loginFormVisibilityService;\n    this.router = router;\n    this.email = '';\n    this.password = '';\n    this.showLoginForm = false;\n    this.submitted = new EventEmitter();\n    this.loginFormOpened = new EventEmitter();\n    this.loginFormVisibilityService.showLoginForm$.subscribe(visibility => {\n      this.showLoginForm = visibility;\n    });\n  }\n  toggleLoginForm() {\n    this.showLoginForm = !this.showLoginForm;\n    this.loginFormVisibilityService.setShowLoginFormVisibility(this.showLoginForm);\n    this.loginFormOpened.emit(this.showLoginForm);\n  }\n  onSubmit() {\n    // Implement your login logic here\n    // For simplicity, we will just consider a successful login\n    // You can add proper validation and authentication logic here\n    // Emit the 'submitted' event when the form is submitted\n    this.submitted.emit();\n    // Call the login service to perform the API call to your backend server\n    this.loginService.login(this.email, this.password).subscribe(response => {\n      // Login successful\n      alert('Login successful');\n      // You can perform further actions here, such as redirecting the user to a dashboard page.\n      this.loginFormVisibilityService.setShowLoginFormVisibility(false);\n      this.loginFormVisibilityService.setLoggedIn(true);\n      this.router.navigate(['home']);\n    }, error => {\n      // Login failed\n      alert('Invalid credentials');\n    });\n  }\n  onCancel() {\n    // Close the login form by hiding it\n    this.loginFormVisibilityService.setShowLoginFormVisibility(false);\n  }\n};\n__decorate([Output()], LoginComponent.prototype, \"submitted\", void 0);\n__decorate([Output()], LoginComponent.prototype, \"loginFormOpened\", void 0);\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","Output","EventEmitter","LoginComponent","constructor","loginService","loginFormVisibilityService","router","email","password","showLoginForm","submitted","loginFormOpened","showLoginForm$","subscribe","visibility","toggleLoginForm","setShowLoginFormVisibility","emit","onSubmit","login","response","alert","setLoggedIn","navigate","error","onCancel","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ViveK\\Documents\\FSD\\Main_project\\Frontend\\src\\app\\pages\\login\\login.component.ts"],"sourcesContent":["import { Component, Output, EventEmitter } from '@angular/core';\r\nimport { LoginService } from 'src/app/shared/link.service';\r\nimport { LoginFormVisibilityService } from 'src/app/shared/login-form-visiblity.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent {\r\n  email: string = '';\r\n  password: string = '';\r\n  showLoginForm: boolean = false;\r\n\r\n  constructor(\r\n    private loginService: LoginService,\r\n    private loginFormVisibilityService: LoginFormVisibilityService,\r\n    private router:Router\r\n  ) {\r\n    this.loginFormVisibilityService.showLoginForm$.subscribe(\r\n      (visibility: boolean) => {\r\n        this.showLoginForm = visibility;\r\n      }\r\n    );\r\n  }\r\n\r\n  @Output() submitted = new EventEmitter<void>();\r\n  @Output() loginFormOpened = new EventEmitter<boolean>();\r\n\r\n  toggleLoginForm() {\r\n    this.showLoginForm = !this.showLoginForm;\r\n    this.loginFormVisibilityService.setShowLoginFormVisibility(this.showLoginForm);\r\n    this.loginFormOpened.emit(this.showLoginForm);\r\n  }\r\n\r\n  onSubmit() {\r\n    // Implement your login logic here\r\n    // For simplicity, we will just consider a successful login\r\n    // You can add proper validation and authentication logic here\r\n\r\n    // Emit the 'submitted' event when the form is submitted\r\n    this.submitted.emit();\r\n\r\n    // Call the login service to perform the API call to your backend server\r\n    this.loginService.login(this.email, this.password).subscribe(\r\n      (response) => {\r\n        // Login successful\r\n        alert('Login successful');\r\n        // You can perform further actions here, such as redirecting the user to a dashboard page.\r\n        this.loginFormVisibilityService.setShowLoginFormVisibility(false);\r\n        this.loginFormVisibilityService.setLoggedIn(true);\r\n        this.router.navigate(['home']);\r\n      },\r\n      (error) => {\r\n        // Login failed\r\n        alert('Invalid credentials');\r\n      }\r\n    );\r\n  }\r\n\r\n  onCancel() {\r\n    // Close the login form by hiding it\r\n    this.loginFormVisibilityService.setShowLoginFormVisibility(false);\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,YAAY,QAAQ,eAAe;AAUxD,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAKzBC,YACUC,YAA0B,EAC1BC,0BAAsD,EACtDC,MAAa;IAFb,KAAAF,YAAY,GAAZA,YAAY;IACZ,KAAAC,0BAA0B,GAA1BA,0BAA0B;IAC1B,KAAAC,MAAM,GAANA,MAAM;IAPhB,KAAAC,KAAK,GAAW,EAAE;IAClB,KAAAC,QAAQ,GAAW,EAAE;IACrB,KAAAC,aAAa,GAAY,KAAK;IAcpB,KAAAC,SAAS,GAAG,IAAIT,YAAY,EAAQ;IACpC,KAAAU,eAAe,GAAG,IAAIV,YAAY,EAAW;IARrD,IAAI,CAACI,0BAA0B,CAACO,cAAc,CAACC,SAAS,CACrDC,UAAmB,IAAI;MACtB,IAAI,CAACL,aAAa,GAAGK,UAAU;IACjC,CAAC,CACF;EACH;EAKAC,eAAeA,CAAA;IACb,IAAI,CAACN,aAAa,GAAG,CAAC,IAAI,CAACA,aAAa;IACxC,IAAI,CAACJ,0BAA0B,CAACW,0BAA0B,CAAC,IAAI,CAACP,aAAa,CAAC;IAC9E,IAAI,CAACE,eAAe,CAACM,IAAI,CAAC,IAAI,CAACR,aAAa,CAAC;EAC/C;EAEAS,QAAQA,CAAA;IACN;IACA;IACA;IAEA;IACA,IAAI,CAACR,SAAS,CAACO,IAAI,EAAE;IAErB;IACA,IAAI,CAACb,YAAY,CAACe,KAAK,CAAC,IAAI,CAACZ,KAAK,EAAE,IAAI,CAACC,QAAQ,CAAC,CAACK,SAAS,CACzDO,QAAQ,IAAI;MACX;MACAC,KAAK,CAAC,kBAAkB,CAAC;MACzB;MACA,IAAI,CAAChB,0BAA0B,CAACW,0BAA0B,CAAC,KAAK,CAAC;MACjE,IAAI,CAACX,0BAA0B,CAACiB,WAAW,CAAC,IAAI,CAAC;MACjD,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC,EACAC,KAAK,IAAI;MACR;MACAH,KAAK,CAAC,qBAAqB,CAAC;IAC9B,CAAC,CACF;EACH;EAEAI,QAAQA,CAAA;IACN;IACA,IAAI,CAACpB,0BAA0B,CAACW,0BAA0B,CAAC,KAAK,CAAC;EACnE;CACD;AAtCWU,UAAA,EAAT1B,MAAM,EAAE,C,gDAAsC;AACrC0B,UAAA,EAAT1B,MAAM,EAAE,C,sDAA+C;AAlB7CE,cAAc,GAAAwB,UAAA,EAL1B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW3B,cAAc,CAuD1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}